{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","today","Date","hh","getHours","mm","getMinutes","ss","getSeconds","useState","second","setSecond","minute","setMinute","hour","setHour","useEffect","setTimeout","className","style","margin","display","flexDirection","width","justifyContent","position","background","height","borderRadius","left","transform","transformOrigin","top","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAGe,SAASA,IAEtB,IAAIC,EAAQ,IAAIC,KACZC,EAAuB,GAAjBF,EAAMG,WACZC,EAAyB,EAAnBJ,EAAMK,aACZC,EAAyB,EAAnBN,EAAMO,aALY,EAQAC,mBAASF,GART,mBAQrBG,EARqB,KAQbC,EARa,OASAF,mBAASJ,GATT,mBASrBO,EATqB,KASbC,EATa,OAUJJ,mBAASN,GAVL,mBAUrBW,EAVqB,KAUfC,EAVe,KAuC5B,OAJAC,qBAAU,WAtBRC,YAAW,WACTN,GAAWD,EAAS,GAAK,KACzBG,GAAWD,EAAS,IAAO,KAC3BG,GAASD,EAAO,SAAY,OAC3B,QAuBH,yBAAKI,UAAU,OACb,yBACEC,MAAO,CACLC,OAAQ,SACRC,QAAS,OACTC,cAAe,MACfC,MAAO,QACPC,eAAgB,kBAQpB,yBACEL,MAAO,CACLM,SAAU,WACVL,OAAQ,SACRM,WAAY,SACZH,MAAO,QACPI,OAAQ,QACRC,aAAc,SAGhB,yBACET,MAAO,CACLU,KAAM,MACNJ,SAAU,WACVF,MAAO,MACPI,OAAQ,QACRD,WAAY,OACZI,UAAU,UAAD,OAAYhB,EAAZ,QACTiB,gBAAiB,mBAIrB,yBACEZ,MAAO,CACLU,KAAM,MACNJ,SAAU,WACVF,MAAO,MACPI,OAAQ,QACRD,WAAY,MACZI,UAAU,UAAD,OAAYlB,EAAZ,QACTmB,gBAAiB,mBAGrB,yBACEZ,MAAO,CACLa,IAAK,OACLH,KAAM,MACNJ,SAAU,WACVF,MAAO,MACPI,OAAQ,OACRD,WAAY,QACZI,UAAU,UAAD,OAAYpB,EAAZ,QACTqB,gBAAiB,mBAIrB,yBACEZ,MAAO,CACLM,SAAU,WACVC,WAAY,QACZH,MAAO,OACPI,OAAQ,OACRK,IAAK,MACLH,KAAM,MACND,aAAc,YCpGNK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b2d55bb8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nexport default function App() {\n  //Gets current time and set for default useState\n  var today = new Date();\n  var hh = (today.getHours()*30);\n  var mm = (today.getMinutes()*6);\n  var ss = (today.getSeconds()*6);\n  \n  //Sets the clock hands\n  const [second, setSecond] = useState(ss);\n  const [minute, setMinute] = useState(mm);\n  const [hour, setHour] = useState(hh);\n\n  const call = () => {\n    setTimeout(() => {\n      setSecond((second + 6) % 360);\n      setMinute((minute + 0.1) % 360);\n      setHour((hour + 0.001666) % 360);\n    }, 1000);\n  };\n\n  // const call = () => {\n  //   setTimeout(function() {\n  //     if (second === 354) {\n  //       setSecond(0);\n  //       setMinute(minute + 6);\n  //       if (minute === 354) {\n  //         setMinute(0);\n  //         setHour(hour + 30);\n  //       }\n  //     } else {\n  //       setSecond(second + 6);\n  //     }\n  //   }, 1000);\n  // };\n\n  useEffect(() => {\n    call();\n  });\n\n  return (\n    <div className=\"App\"> \n      <div\n        style={{\n          margin: \"0 auto\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          width: \"300px\",\n          justifyContent: \"space-around\"\n        }}\n      >\n        {/* <p>second: {second / 6}</p>\n        <p>minute: {minute / 6}</p>\n        <p>hour: {hour / 30}</p> */}\n      </div>\n\n      <div\n        style={{\n          position: \"relative\",\n          margin: \"0 auto\",\n          background: \"yellow\",\n          width: \"200px\",\n          height: \"200px\",\n          borderRadius: \"100%\"\n        }}\n      >\n        <div\n          style={{\n            left: \"50%\",\n            position: \"absolute\",\n            width: \"5px\",\n            height: \"100px\",\n            background: \"blue\",\n            transform: `rotate(${hour}deg)`,\n            transformOrigin: \"center bottom\"\n          }}\n        />\n\n        <div\n          style={{\n            left: \"50%\",\n            position: \"absolute\",\n            width: \"5px\",\n            height: \"100px\",\n            background: \"red\",\n            transform: `rotate(${minute}deg)`,\n            transformOrigin: \"center bottom\"\n          }}\n        />\n        <div\n          style={{\n            top: \"17px\",\n            left: \"50%\",\n            position: \"absolute\",\n            width: \"5px\",\n            height: \"80px\",\n            background: \"green\",\n            transform: `rotate(${second}deg)`,\n            transformOrigin: \"center bottom\"\n          }}\n        />\n\n        <div\n          style={{\n            position: \"absolute\",\n            background: \"black\",\n            width: \"10px\",\n            height: \"10px\",\n            top: \"46%\",\n            left: \"49%\",\n            borderRadius: \"100%\"\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}