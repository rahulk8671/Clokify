{"version":3,"sources":["Components/Clock/index.js","Components/Hour/index.js","Components/Minute/index.js","Components/Second/index.js","Components/CenterPoint/index.js","Components/Numbers/index.js","App.js","serviceWorker.js","index.js"],"names":["Clock","Styled","div","children","Hour","hour","style","transform","Minute","minute","Second","second","CenterPoint","Numbers","Number","span","props","rotation","numbers","map","num","reduce","acc","curr","concat","numberObjects","forEach","i","a","length","angle","Math","PI","toRadians","obj","value","top","sin","left","cos","key","push","App","useState","Date","time","setTime","useEffect","timeout","setTimeout","getTime","clearTimeout","getHours","getMinutes","getSeconds","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oaAGA,IAAMA,EAAQC,IAAOC,IAAV,KAQI,kBAAGC,EAAH,EAAGA,SAAH,OAAkB,kBAACH,EAAD,KAAQG,I,gPCRzC,IAAMC,EAAOH,IAAOC,IAAV,KAUK,kBAAGG,EAAH,EAAGA,KAAH,OAAc,kBAACD,EAAD,CAAME,MAAO,CAAEC,UAAW,UAAYF,EAAO,W,+OCV1E,IAAMG,EAASP,IAAOC,IAAV,KAUG,kBAAGO,EAAH,EAAGA,OAAH,OAAgB,kBAACD,EAAD,CAAQF,MAAO,CAAEC,UAAW,UAAYE,EAAS,W,iPCVhF,IAAMC,EAAST,IAAOC,IAAV,KAUG,kBAAGS,EAAH,EAAGA,OAAH,OAAgB,kBAACD,EAAD,CAAQJ,MAAO,CAAEC,UAAW,UAAYI,EAAS,W,kQCXhF,IAUeC,EAVKX,IAAOC,IAAV,K,2QCCjB,IAEMW,EAAUZ,IAAOC,IAAV,KAKPY,EAASb,IAAOc,KAAV,KAGG,SAAAC,GAAK,uBAAcA,EAAMC,SAApB,iCAEL,aACb,IAAIC,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,IAAK,KAEzEA,EAAUA,EAAQC,KAAI,SAAAC,GAAG,MAAI,CAACA,EAfb,oBAgBNC,QAAO,SAACC,EAAKC,GACZ,OAAOD,EAAIE,OAAOD,KACjB,IAEb,IAAIE,EAAgB,GAcpB,OAbAP,EAAQQ,SAAQ,SAACN,EAAKO,GACpB,IACIC,EAAI,IAAMV,EAAQW,OAChBC,EAwBV,SAAmBA,GACjB,OAAOA,GAASC,KAAKC,GAAK,KAzBVC,CAAUL,EAAID,GACxBO,EAAM,CACNC,MAAOf,EACPgB,IALI,IAKKL,KAAKM,IAAIP,GAClBQ,KANI,IAMMP,KAAKQ,IAAIT,GACnBb,SA7BW,MA6BDG,EAAuBQ,EAAID,EAAK,GAAM,EAChDa,IAAKb,GAETF,EAAcgB,KAAKP,MAGnB,kBAACrB,EAAD,KACGY,EAAcN,KAAI,gBAAGgB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAKE,EAAf,EAAeA,KAAMrB,EAArB,EAAqBA,SAAUuB,EAA/B,EAA+BA,IAA/B,OACjB,kBAAC,EAAD,CACEA,IAAKA,EACLvB,SAAUA,EACVX,MAAO,CAAC8B,IAAI,GAAD,OAAKA,EAAL,MAAcE,KAAK,GAAD,OAAKA,EAAL,QAC5BH,QCpCI,SAASO,IAAO,IAAD,EAEFC,mBAAS,IAAIC,MAFX,mBAEnBC,EAFmB,KAEbC,EAFa,KAa1B,OATAC,qBAAU,WACN,IAAIC,EAAUC,YAAW,WACrBH,EAAQ,IAAIF,KAAKC,EAAKK,UAAY,QACnC,KACH,OAAO,WACHC,aAAaH,MAElB,CAACH,EARO,IAWP,6BACI,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMxC,KAAS,GAAUwC,EAAKO,WAAkB,GAAeP,EAAKQ,eACpE,kBAAC,EAAD,CAAQ5C,OAAW,EAAUoC,EAAKQ,aAAkB,IAAaR,EAAKS,eACtE,kBAAC,EAAD,CAAQ3C,OAAS,EAAUkC,EAAKS,eAChC,kBAAC,EAAD,QChBIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACpB,EAAD,OAEFqB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2308778f.chunk.js","sourcesContent":["import React from 'react'\nimport Styled from 'styled-components'\n\nconst Clock = Styled.div`\n    border-radius: 50%;\n    width: 300px;\n    height: 300px;\n    position: relative;\n    background-color: yellow;\n`\n\nexport default ({ children }) => <Clock>{children}</Clock>\n\n","import React from 'react'\nimport Styled from 'styled-components'\n\nconst Hour = Styled.div`\n    left: calc(50% - 2.5px);\n    bottom: 50%;\n    width: 5px;\n    height: 35%;\n    background: blue;\n    position: absolute;\n    transform-origin: bottom center;\n`\n\nexport default ({ hour }) => <Hour style={{ transform: 'rotate(' + hour + 'deg)' }} />\n","import React from 'react'\nimport Styled from 'styled-components'\n\nconst Minute = Styled.div`\n    left: calc(50% - 2.5px);\n    bottom: 50%;\n    width: 5px;\n    height: 40%;\n    background: red;\n    position: absolute;\n    transform-origin: bottom center;\n`\n\nexport default ({ minute }) => <Minute style={{ transform: 'rotate(' + minute + 'deg)' }} />","import React from 'react'\nimport Styled from 'styled-components'\n\nconst Second = Styled.div`\n    bottom: 50%;\n    left: calc(50% - 2.5px);\n    width: 5px;\n    height: 45%;\n    background: green;\n    position: absolute;\n    transform-origin: bottom center;\n`\n\nexport default ({ second }) => <Second style={{ transform: 'rotate(' + second + 'deg)' }} />","import Styled from 'styled-components'\n\nconst CenterPoint = Styled.div`\n    width: 10px;\n    height: 10px;\n    top: 50%;\n    left: 50%;\n    position: absolute;\n    border-radius: 50%;\n    background-color: black;\n    transform: translate(-50%, -50%);\n`\nexport default CenterPoint\n","import React from 'react'\nimport Styled from 'styled-components'\n\nconst SCALE_CHAR = 'l';\n\nconst Numbers = Styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n`\nconst Number = Styled.span`\n  position: absolute;\n  transform-origin: top center;\n  transform: ${props => `rotate(${props.rotation}deg) translate(-50%, -50%)`};\n`\nexport default () => {\n  let numbers = ['3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '1', '2'];\n\n  numbers = numbers.map(num => [num, SCALE_CHAR, SCALE_CHAR, SCALE_CHAR, SCALE_CHAR])\n            .reduce((acc, curr) => {\n              return acc.concat(curr);\n            }, []);\n \n  let numberObjects = [];\n  numbers.forEach((num, i) => {\n    let r = 140;\n    let a = 360 / numbers.length;\n    const angle = toRadians(a * i);\n    let obj = {\n        value: num,\n        top: r * Math.sin(angle),\n        left: r * Math.cos(angle),\n        rotation: num === SCALE_CHAR ? ((a * i) - 90) : 0,\n        key: i\n    };\n    numberObjects.push(obj);\n  });\n  return (\n    <Numbers>\n      {numberObjects.map(({ value, top, left, rotation, key}) => \n        <Number \n          key={key} \n          rotation={rotation}\n          style={{top: `${top}px`, left: `${left}px`}}>\n          {value}\n        </Number>)\n      }\n    </Numbers>\n  );\n}\n\nfunction toRadians(angle) {\n  return angle * (Math.PI / 180);\n}","import React, { useEffect, useState } from \"react\"\nimport Clock from \"./Components/Clock\"\nimport Hour from \"./Components/Hour\"\nimport Minute from \"./Components/Minute\"\nimport Second from \"./Components/Second\"\nimport CenterPoint from \"./Components/CenterPoint\"\nimport Numbers from \"./Components/Numbers\"\n\nexport default function App() {\n    \n    const [time, setTime] = useState(new Date());\n    let rate = 1;\n    useEffect(() => {\n        let timeout = setTimeout(() => {\n            setTime(new Date(time.getTime() + 1000));\n        }, 1000/rate);\n        return () => {\n            clearTimeout(timeout);\n        }\n    }, [time, rate]);\n\n    return (\n        <div>\n            <Clock>\n                <Numbers />\n                <Hour hour={( (360/12) * time.getHours() ) + ( (360/12)/60 ) * time.getMinutes()} />\n                <Minute minute={( (360/60) * time.getMinutes() ) + (360/60*60) * time.getSeconds()} />\n                <Second second={(360/60) * time.getSeconds()} />\n                <CenterPoint />\n            </Clock>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}